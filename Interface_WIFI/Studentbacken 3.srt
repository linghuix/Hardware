1
00:00:00,720 --> 00:00:02,820
我还忘了一个事情就是

2
00:00:04,720 --> 00:00:08,140
之前的两个方法其实并不能完全消除

3
00:00:09,000 --> 00:00:10,200
就是WiFi

4
00:00:11,080 --> 00:00:12,640
把好几个数据包

5
00:00:12,640 --> 00:00:15,020
好几个采样子给打包

6
00:00:15,020 --> 00:00:16,500
一起发送的这样一个问题

7
00:00:17,360 --> 00:00:18,800
这个解决方法就是

8
00:00:20,420 --> 00:00:21,980
我在MNF介绍端

9
00:00:21,980 --> 00:00:24,460
把它看作是一个数据流

10
00:00:26,940 --> 00:00:29,180
我是一个字符一个字符读的

11
00:00:29,820 --> 00:00:32,660
这样它不管是很多个一起发

12
00:00:32,660 --> 00:00:33,860
还是单独一个发

13
00:00:33,860 --> 00:00:37,440
我把它看作是一个连成一个串的一个数据流

14
00:00:38,260 --> 00:00:40,280
这样我就不用管它是不是

15
00:00:40,280 --> 00:00:42,300
打包算多给你发过来了

16
00:00:43,560 --> 00:00:45,520
然后我在MNF介绍端一个读

17
00:00:46,340 --> 00:00:50,180
这样就实现了数据一个一个接收

18
00:00:51,720 --> 00:00:54,240
然后因为它好几个一起打包过来

19
00:00:54,240 --> 00:00:56,360
可能中间可能我接收的时候

20
00:00:56,360 --> 00:00:58,480
延迟可能会比较大

21
00:00:58,480 --> 00:00:59,820
不同数据包之间

22
00:01:02,780 --> 00:01:04,580
但是因为里面有时间戳

23
00:01:04,580 --> 00:01:07,760
我还是可以把它给分解解释出来

24
00:01:07,760 --> 00:01:11,100
它具体是哪个时间点采样的一个数据包

25
00:01:12,660 --> 00:01:13,400
数据值

26
00:01:14,840 --> 00:01:17,240
所以它不管是一起发还是单独发

27
00:01:17,240 --> 00:01:20,980
我都能知道它具体一个采样的一个时刻

28
00:01:24,500 --> 00:01:29,660
对所以我在Matlab上面还原解析出这个数据方式完全没问题的

29
00:01:30,180 --> 00:01:35,720
只是它这种把多个数据值一起打包的这样一种算法这样一种

30
00:01:36,900 --> 00:01:40,240
发送方式可能会导致我接收端

31
00:01:40,240 --> 00:01:46,360
接收端接收时候的一个时间和它实际采样的一个时刻

32
00:01:46,360 --> 00:01:49,020
它那个差值可能会更加大

33
00:01:50,920 --> 00:01:57,700
所以这个它让它单独每一个采样值一起发送

34
00:01:59,540 --> 00:02:08,200
就是让它每个传感器的一个采样值每次都发送出来

35
00:02:15,540 --> 00:02:23,940
所以虽然我所以我目前还是无法解决它打包发送的这样一个问题

36
00:02:23,940 --> 00:02:30,080
最理想的情况是通过一个算法让它实时采集一个数据值

37
00:02:30,080 --> 00:02:31,520
就发送一个数据值

38
00:02:31,520 --> 00:02:32,880
不要让它去打包

39
00:02:33,780 --> 00:02:35,860
但是目前我做不到

40
00:02:36,800 --> 00:02:40,000
可能以后会有几个方法的吧

41
00:02:40,700 --> 00:02:50,560
但是我现在通过添加时间戳的方法是最大化的程度上去减轻的这样打包所带来的一些危害

42
00:02:52,660 --> 00:02:55,880
但是我们需要check一下在MyLab端

43
00:02:57,260 --> 00:03:00,340
check一下这种有打包所带来的那个

44
00:03:00,340 --> 00:03:06,640
我接收时刻和它实际采样时刻这样一个差值偏大的一种情况

45
00:03:06,640 --> 00:03:09,400
看看它到底会不会影响我的实时控制

46
00:03:09,940 --> 00:03:14,160
目前来说我测试大概是0.06秒以内

47
00:03:14,920 --> 00:03:16,780
当然我测了一下

48
00:03:16,780 --> 00:03:21,360
当然有的时候大部分情况是0.06秒以内

49
00:03:21,360 --> 00:03:25,680
有的时候会0.1秒

50
00:03:26,400 --> 00:03:31,060
但我觉得这个并不会影响外国格控制的一个

51
00:03:32,400 --> 00:03:39,220
其实外国格控制并不一定需要非常精确的一个时间

52
00:03:41,040 --> 00:03:44,020
非常精确的一个这样一个控制算法

53
00:03:44,520 --> 00:03:50,540
0.11秒其实并不会对它一个助力效果产生多大影响

54
00:03:51,080 --> 00:03:53,880
因为我在确实期间发表了一篇论文

55
00:03:54,760 --> 00:04:01,580
上面说大概是200毫秒才会影响它的一个助力时机和助力效果

56
00:04:03,340 --> 00:04:05,900
大概是0.2秒的样子

57
00:04:05,900 --> 00:04:12,200
所以这个是目前在这样一个延迟情况是一个大大低于0.2秒

58
00:04:12,200 --> 00:04:14,460
所以效果应该是可以的

59
00:04:14,460 --> 00:04:15,160
所以效果应该是可以的

